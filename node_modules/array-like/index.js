
var Proteus = require('proteus'),
    // Name of Array methods that return new arrays
    MAKERS  = ['concat', 'slice', 'filter', 'map'],
    ArrayProto = Array.prototype,
    ArrayLike;

/**
 * @class ArrayLike
 * @extends Array
 */
module.exports = ArrayLike = Proteus.Class.derive(Object.defineProperties({}, {
    /**
     * @constructor
     * @param {...Mixed} [items]
     */
    init: {value: function () {
        Array.apply(this, arguments);
        if (arguments.length) {
            this.splice.apply(
                this,
                [0, this.length].concat(Proteus.slice(arguments))
            );
        }
    }},
    /**
     * Get a indexed or keyed property.
     * @param {Integer|String} key
     * @returns {Mixed}
     */
    get: {value: function (key) {
        return this[key];
    }},
    /**
     * Set an indexed or keyed property with a value.
     * Needed since we can't use the bracket operators.
     * @param {Integer|String} key
     * @param {Mixed} val
     * @returns {ArrayLike} the instance
     */
    set: {value: function (key, val) {
        var idx = parseInt(key, 10);

        if (isNaN(idx)) {
            this[key] = val;
        }
        else {
            this[idx] = val;
            if (idx >= this.length) {
                this.length = idx + 1;
            }
        }

        return this;
    }},
    
    toArray: {value: function () {
        return Proteus.slice(this);
    }},
    
    valueOf: { value: function () {
        return this.toArray();
    }}
}));

// Include Array methods
ArrayLike.include(Array);
// TODO: Fix Proteus.Class#include to not overwrite the constructor property
ArrayLike.prototype.constructor = ArrayLike;

// Now we overwrite the methods that should return a new ArrayLike object
// instead of a standard Array
MAKERS.forEach(function (method) {
    this[method] = function () {
        var args = Proteus.slice(arguments);
        
        return this.constructor.make(ArrayProto[method].apply(
            this.toArray(),
            args.map(function (arg) {
                return arg.toArray ? arg.toArray() : arg;
            })
        ));
    };
}, ArrayLike.prototype);
